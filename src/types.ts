import { ReactElement } from "react";

export type UseQueryResult<T> = {
  // Base query state
  originalArgs?: unknown; // Arguments passed to the query
  data?: T; // The latest returned result regardless of hook arg, if present
  currentData?: T; // The latest returned result for the current hook arg, if present
  error?: unknown; // Error result if present
  requestId?: string; // A string generated by RTK Query
  endpointName?: string; // The name of the given endpoint for the query
  startedTimeStamp?: number; // Timestamp for when the query was initiated
  fulfilledTimeStamp?: number; // Timestamp for when the query was completed

  // Derived request status booleans
  isUninitialized: boolean; // Query has not started yet.
  isLoading: boolean; // Query is currently loading for the first time. No data yet.
  isFetching: boolean; // Query is currently fetching, but might have data from an earlier request.
  isSuccess: boolean; // Query has data from a successful load.
  isError: boolean; // Query is currently in an "error" state.

  refetch: () => void; // A function to force refetch the query
};

export type LoaderTransformFunction<
  QRU extends readonly UseQueryResult<unknown>[],
  R extends unknown
> = (queries: QRU) => R;

export type OptionalGenericArg<T> = T extends never ? [] : [T];

export type CreateLoaderArgs<
  QRU extends readonly UseQueryResult<unknown>[],
  R extends unknown,
  A = never
> = {
  queries: (...args: OptionalGenericArg<A>) => QRU;
  transform?: LoaderTransformFunction<QRU, R>;
};

export type UseLoader<A, R> = (
  ...args: OptionalGenericArg<A>
) => UseQueryResult<R>;

export type CreateLoaderType = <
  QRU extends readonly UseQueryResult<unknown>[],
  R extends unknown = QRU,
  A = never
>(
  createLoaderArgs: CreateLoaderArgs<QRU, R, A>
) => UseLoader<A, R>;

export type ComponentWithLoaderData<
  P extends Record<string, any>,
  R extends unknown
> = (props: P, loaderData: R) => ReactElement;

type InferQueryResult<T> = T extends UseQueryResult<infer X>
  ? X
  : never;

export type InferLoaderData<T> = T extends UseLoader<any, any>
  ? InferQueryResult<ReturnType<T>>
  : never;
